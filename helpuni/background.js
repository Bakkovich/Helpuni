const serverVersionUrl = 'http://10.2.3.53:8097/version.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ä–µ—Å—É—Ä—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
function getResourceUrl(resourcePath) {
  return chrome.runtime.getURL(resourcePath);
}

function getLocalVersion(callback) {
  fetch(getResourceUrl('manifest.json'))
    .then(response => {
      if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç');
      return response.json();
    })
    .then(manifest => {
      callback(manifest.version);
    })
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞:', err));
}

function downloadAndUpdateExtension(downloadUrl) {
  fetch(downloadUrl)
    .then(response => {
      if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ');
      return response.blob();
    })
    .then(blob => {
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'extension-chrome.zip';
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
      alert('–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∏—Ç–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.');
    })
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', err));
}

function notifyUpdateAvailable(version, downloadUrl) {
  chrome.notifications.create({
    type: 'basic',
    iconUrl: 'icons/icon128.png',
    title: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
    message: `–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${version} –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.`,
    buttons: [{ title: '–°–∫–∞—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç' }],
    isClickable: true
  }, (notificationId) => {
    chrome.notifications.onButtonClicked.addListener((id, buttonIndex) => {
      if (id === notificationId && buttonIndex === 0) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        chrome.tabs.create({ url: 'instructions.html' });
      }
    });
  });
}

function checkForUpdates() {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
  fetch(serverVersionUrl)
    .then(response => {
      if (!response.ok) throw new Error('Failed to fetch version info');
      return response.json();
    })
    .then(serverVersionInfo => {
      getLocalVersion(localVersion => {
        console.log(`–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${localVersion}, –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${serverVersionInfo.version}`);
        if (localVersion !== serverVersionInfo.version) {
          console.log(`–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${serverVersionInfo.version}.`);
          chrome.storage.local.set({
            updateAvailable: true,
            downloadUrl: serverVersionInfo.downloadUrl
          });
          notifyUpdateAvailable(serverVersionInfo.version, serverVersionInfo.downloadUrl);
        } else {
          console.log('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');
          chrome.storage.local.set({ updateAvailable: false });
        }
      });
    })
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', err));
}
// Check for updates every hour
const isolatedTabs = new Map(); // tabId -> domain
const isolatedCookies = new Map(); // tabId -> cookies
const originalCookies = new Map(); // domain -> cookies
const isolatedGroups = new Map(); // tabId -> groupId
const ISOLATION_GROUP_NAME = "–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏";
const TAB_COLORS = [
  'grey',
  'blue',
  'red',
  'yellow',
  'green',
  'pink',
  'purple',
  'cyan'
];
let currentColorIndex = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞
function getNextColor() {
  const color = TAB_COLORS[currentColorIndex];
  currentColorIndex = (currentColorIndex + 1) % TAB_COLORS.length;
  return color;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ URL
function tryCreateURL(urlString) {
    try {
      return new URL(urlString);
    } catch (e) {
      console.log('Invalid URL:', urlString);
      return null;
    }
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫–∏
  async function safeSetCookie(cookie, url) {
    try {
      const urlObj = new URL(url);
      const baseUrl = `${urlObj.protocol}//${cookie.domain.startsWith('.') ? cookie.domain.slice(1) : cookie.domain}`;
  
      const cookieProperties = {
        url: baseUrl + (cookie.path || '/'),
        name: cookie.name,
        value: cookie.value || '',
        domain: cookie.domain,
        path: cookie.path || '/',
        secure: !!cookie.secure,
        httpOnly: !!cookie.httpOnly,
        sameSite: cookie.sameSite || 'lax'
      };
  
      if (cookie.expirationDate && cookie.expirationDate > Date.now() / 1000) {
        cookieProperties.expirationDate = cookie.expirationDate;
      }
  
      delete cookieProperties.hostOnly;
      delete cookieProperties.session;
      delete cookieProperties.storeId;
  
      if (cookieProperties.domain.startsWith('.')) {
        cookieProperties.domain = cookieProperties.domain.slice(1);
      }
  
      Object.keys(cookieProperties).forEach(key => 
        cookieProperties[key] === undefined && delete cookieProperties[key]
      );
  
      console.log('Setting cookie with properties:', cookieProperties);
      await chrome.cookies.set(cookieProperties);
    } catch (e) {
      console.log('Error setting cookie:', {
        name: cookie.name,
        error: e,
        details: cookie,
        stack: e.stack
      });
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—É–∫–∏
  function filterValidCookies(cookies) {
    return cookies.filter(cookie => {
      if (!cookie.name || !cookie.domain) {
        return false;
      }
  
      cookie.value = cookie.value || '';
      cookie.path = cookie.path || '/';
      cookie.sameSite = cookie.sameSite || 'lax';
      
      delete cookie.hostOnly;
      delete cookie.session;
      delete cookie.storeId;
  
      return true;
    });
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É–∫–∏
  async function safeRemoveCookie(url, name, domain, path) {
    try {
      const urlObj = new URL(url);
      const baseUrl = `${urlObj.protocol}//${domain.startsWith('.') ? domain.slice(1) : domain}`;
      
      await chrome.cookies.remove({
        url: baseUrl + (path || '/'),
        name: name
      });
    } catch (e) {
      console.log('Error removing cookie:', {
        name: name,
        error: e,
        url: url,
        domain: domain,
        path: path
      });
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
function generateUniqueGroupName(selectionText) {
    const groupNumber = isolatedGroups.size + 1;
    return `üîí${groupNumber} ${selectionText}`;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ CSS –≤ –≤–∫–ª–∞–¥–∫—É
  function injectCSS(tabId, groupName) {
    const cssCode = `
      body::before {
        content: "–°–µ—Å—Å–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞: üîí";
        display: block;
        text-align: center;
        background-color: #f0f0f0;
        color: #333;
        font-weight: bold;
        padding: 5px;
        border-bottom: 2px solid #ccc;
        z-index: 9999;
        position: relative;
      }
    `;
    chrome.scripting.insertCSS({
      target: { tabId: tabId },
      css: cssCode
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
async function createIsolatedTab(url,selectionText, sourceTabId = null) {
    const urlObj = tryCreateURL(url);
    if (!urlObj) return null;
    
    const domain = urlObj.hostname;
    
    if (!originalCookies.has(domain)) {
      const cookies = await chrome.cookies.getAll({ domain });
      originalCookies.set(domain, filterValidCookies(cookies));
    }
    
    const currentCookies = await chrome.cookies.getAll({ domain });
    for (const cookie of currentCookies) {
      await safeRemoveCookie(
        `${urlObj.protocol}//${domain}${cookie.path}`,
        cookie.name,
        domain,
        cookie.path
      );
    }
    
    const newTab = await chrome.tabs.create({ url });
    isolatedTabs.set(newTab.id, domain);
  
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –≤–∫–ª–∞–¥–∫–∞, –∫–æ–ø–∏—Ä—É–µ–º –µ—ë –∫—É–∫–∏
    if (sourceTabId && isolatedTabs.has(sourceTabId)) {
      const sourceDomain = isolatedTabs.get(sourceTabId);
      
      if (isolatedCookies.has(sourceTabId)) {
        isolatedCookies.set(newTab.id, isolatedCookies.get(sourceTabId));
      }
    }
  
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    await chrome.tabs.group({ tabIds: newTab.id });
    const groupId = (await chrome.tabs.get(newTab.id)).groupId;
    
    const uniqueGroupName = generateUniqueGroupName(selectionText);
    await chrome.tabGroups.update(groupId, {
      title: uniqueGroupName,
      collapsed: false,
      color: getNextColor()
    });
  
    isolatedGroups.set(newTab.id, groupId);
  
    // –ò–Ω—ä–µ–∫—Ü–∏—è CSS –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    injectCSS(newTab.id, uniqueGroupName);
  
    return newTab;
  }

 //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
chrome.runtime.onStartup.addListener(() => {
  setTimeout(checkForUpdates, 30);
});

chrome.runtime.onInstalled.addListener(() => {
  checkForUpdates();
});

//–í—ã–∑–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
chrome.runtime.onInstalled.addListener(() => {
  const contextMenus = [
    { id: "calllog", title: "Calllog", contexts: ["selection"] },
    { id: "events_ats", title: "–°–æ–±—ã—Ç–∏—è –Ω–∞ –ê–¢–°", contexts: ["selection"] },
    { id: "reg", title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∏–Ω–∏–π", contexts: ["selection"] },
    { id: "ats_ip", title: "SSH –≤ –ê–¢–°", contexts: ["selection"] },
    { id: "openInTempSession", title: "–û—Ç–∫—Ä—ã—Ç—å –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ", contexts: ["link"] },
    { id: "amocrm", title: "AmoCRM", contexts: ["selection"] }
  ];

  contextMenus.forEach(menu => chrome.contextMenus.create(menu));
});

// –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
chrome.contextMenus.onClicked.addListener(async (info, tab) => {
  if (info.menuItemId === "openInTempSession") {
      chrome.scripting.executeScript({
          target: { tabId: tab.id },
          func: (linkUrl) => {
              const linkElement = document.querySelector(`a[href="${linkUrl}"]`);
              if (linkElement) {
                  const parentElement = linkElement.closest('.sonata-ba-list-field.sonata-ba-list-field-integer');
                  if (parentElement) {
                      const spanElement = parentElement.querySelector('span');
                      return spanElement ? spanElement.innerText : null;
                  }
              }
              return null;
          },
          args: [info.linkUrl]
      }, (result) => {
          if (chrome.runtime.lastError || !result || !result[0].result) {
              chrome.notifications.create({
                  type: 'basic',
                  iconUrl: 'icons/icon48.png',
                  title: '–û—à–∏–±–∫–∞',
                  message: '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º "sonata-ba-list-field sonata-ba-list-field-integer" –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ span –ø—É—Å—Ç.'
              });
              createIsolatedTab(info.linkUrl, '', tab.id);
          } else {
              const spanContent = result[0].result;
              chrome.notifications.create({
                  type: 'basic',
                  iconUrl: 'icons/icon48.png',
                  title: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ <span>',
                  message: spanContent
              });
              createIsolatedTab(info.linkUrl, spanContent, tab.id);
          }
      });
  } else if (info.menuItemId === "amocrm") {
      const cabNumber = info.selectionText;
      chrome.windows.create({
          url: chrome.runtime.getURL(`Amocrm.html?cab_number=${encodeURIComponent(cabNumber)}`),
          type: "popup",
          width: 800,
          height: 600,
          focused: true
      });
  } else {
      chrome.windows.create({
          url: chrome.runtime.getURL("pop.html"),
          type: "popup",
          focused: true
      }, (win) => {
          setTimeout(() => {
              chrome.tabs.sendMessage(win.tabs[0].id, info, (resp) => {
                  chrome.tabs.update(win.tabs[0].id, { active: true });
              });
          }, 500);
      });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ CSS –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  if (changeInfo.status === 'complete' && isolatedTabs.has(tabId)) {
    const groupId = isolatedGroups.get(tabId);
    const groupName = `üîí${groupId}`;
    injectCSS(tabId, groupName);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫
chrome.tabs.onCreated.addListener(async (tab) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
  const openerTab = tab.openerTabId ? await chrome.tabs.get(tab.openerTabId) : null;
  if (openerTab && isolatedTabs.has(openerTab.id)) {
    // –ï—Å–ª–∏ URL –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∂–¥–µ–º –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (!tab.url || tab.url === 'about:blank') {
      const listener = (tabId, changeInfo, updatedTab) => {
        if (tabId === tab.id && changeInfo.url) {
          // –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é
          const domain = new URL(changeInfo.url).hostname;
          isolatedTabs.set(tab.id, domain);
          
          // –ö–æ–ø–∏—Ä—É–µ–º –∫—É–∫–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≤–∫–ª–∞–¥–∫–∏
          if (isolatedCookies.has(openerTab.id)) {
            isolatedCookies.set(tab.id, isolatedCookies.get(openerTab.id));
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É –∂–µ –≥—Ä—É–ø–ø—É
          const sourceGroupId = isolatedGroups.get(openerTab.id);
          if (sourceGroupId) {
            chrome.tabs.group({ tabIds: tab.id, groupId: sourceGroupId });
            isolatedGroups.set(tab.id, sourceGroupId);
          }
          
          chrome.tabs.onUpdated.removeListener(listener);
        }
      };
      chrome.tabs.onUpdated.addListener(listener);
    } else {
      // –î–ª—è –≤–∫–ª–∞–¥–æ–∫ —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º URL
      const domain = new URL(tab.url).hostname;
      isolatedTabs.set(tab.id, domain);
      
      if (isolatedCookies.has(openerTab.id)) {
        isolatedCookies.set(tab.id, isolatedCookies.get(openerTab.id));
      }
      
      const sourceGroupId = isolatedGroups.get(openerTab.id);
      if (sourceGroupId) {
        await chrome.tabs.group({ tabIds: tab.id, groupId: sourceGroupId });
        isolatedGroups.set(tab.id, sourceGroupId);
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
chrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {
if (changeInfo.status === 'complete') {
  const url = tryCreateURL(tab.url);
  if (!url) return;

  const domain = url.hostname;
  const urlPrefix = `${url.protocol}//${domain}`;
  
  if (isolatedTabs.has(tabId)) {
    console.log('Processing isolated tab update:', tabId);
    
    if (isolatedCookies.has(tabId)) {
      const currentCookies = await chrome.cookies.getAll({ domain });
      const isolatedTabCookies = isolatedCookies.get(tabId);
      
      if (JSON.stringify(currentCookies) !== JSON.stringify(isolatedTabCookies)) {
        console.log('Restoring isolated cookies after update');
        
        for (const cookie of currentCookies) {
          await safeRemoveCookie(
            `${urlPrefix}${cookie.path}`,
            cookie.name,
            domain,
            cookie.path
          );
        }
        
        for (const cookie of isolatedTabCookies) {
          await safeSetCookie(
            cookie,
            `${urlPrefix}${cookie.path}`
          );
        }
      }
    } else {
      console.log('Initial save of isolated cookies');
      const cookies = await chrome.cookies.getAll({ domain });
      if (cookies && cookies.length > 0) {
        const validCookies = filterValidCookies(cookies);
        isolatedCookies.set(tabId, validCookies);
      }
    }
  } else {
    if (originalCookies.has(domain)) {
      const cookies = await chrome.cookies.getAll({ domain });
      if (JSON.stringify(cookies) !== JSON.stringify(originalCookies.get(domain))) {
        const origCookies = originalCookies.get(domain);
        
        for (const cookie of cookies) {
          await safeRemoveCookie(
            `${urlPrefix}${cookie.path}`,
            cookie.name,
            domain,
            cookie.path
          );
        }
        
        for (const cookie of origCookies) {
          await safeSetCookie(
            cookie,
            `${urlPrefix}${cookie.path}`
          );
        }
      }
    }
  }
}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
chrome.tabs.onActivated.addListener(async (activeInfo) => {
try {
  const tabId = activeInfo.tabId;
  const tab = await chrome.tabs.get(tabId);
  
  if (!tab.url) return;
  
  const url = tryCreateURL(tab.url);
  if (!url) return;
  
  const domain = url.hostname;
  const urlPrefix = `${url.protocol}//${domain}`;

  if (isolatedTabs.has(tabId)) {
    if (isolatedCookies.has(tabId)) {
      console.log('Restoring isolated cookies on tab activation:', tabId);
      const currentCookies = await chrome.cookies.getAll({ domain });
      const isolatedTabCookies = isolatedCookies.get(tabId);
      
      for (const cookie of currentCookies) {
        await safeRemoveCookie(
          `${urlPrefix}${cookie.path}`,
          cookie.name,
          domain,
          cookie.path
        );
      }
      
      for (const cookie of isolatedTabCookies) {
        await safeSetCookie(
          cookie,
          `${urlPrefix}${cookie.path}`
        );
      }
    }
  } else {
    if (originalCookies.has(domain)) {
      const origCookies = originalCookies.get(domain);
      const currentCookies = await chrome.cookies.getAll({ domain });
      
      if (JSON.stringify(currentCookies) !== JSON.stringify(origCookies)) {
        for (const cookie of currentCookies) {
          await safeRemoveCookie(
            `${urlPrefix}${cookie.path}`,
            cookie.name,
            domain,
            cookie.path
          );
        }
        
        for (const cookie of origCookies) {
          await safeSetCookie(
            cookie,
            `${urlPrefix}${cookie.path}`
          );
        }
      }
    }
  }
} catch (e) {
  console.log('Error in tab activation handler:', e);
}
});

// // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∏–∫ –¥–ª—è webRequest
// chrome.webRequest.onBeforeRequest.addListener(
// async (details) => {
//   if (details.tabId === -1) return;
  
//   const url = tryCreateURL(details.url);
//   if (!url) return;
  
//   const domain = url.hostname;
//   const tabId = details.tabId;

//   if (isolatedTabs.has(tabId) && isolatedCookies.has(tabId)) {
//     const currentCookies = await chrome.cookies.getAll({ domain });
//     const isolatedTabCookies = isolatedCookies.get(tabId);
    
//     if (JSON.stringify(currentCookies) !== JSON.stringify(isolatedTabCookies)) {
//       const urlPrefix = `${url.protocol}//${domain}`;
      
//       for (const cookie of currentCookies) {
//         await safeRemoveCookie(
//           `${urlPrefix}${cookie.path}`,
//           cookie.name,
//           domain,
//           cookie.path
//         );
//       }
      
//       for (const cookie of isolatedTabCookies) {
//         await safeSetCookie(
//           cookie,
//           `${urlPrefix}${cookie.path}`
//         );
//       }
//     }
//   }
// },
// { urls: ["<all_urls>"] }
// );

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
chrome.tabs.onRemoved.addListener((tabId) => {
isolatedTabs.delete(tabId);
isolatedCookies.delete(tabId);
isolatedGroups.delete(tabId);
});

